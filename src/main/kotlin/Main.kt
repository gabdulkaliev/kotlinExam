import java.time.LocalDateTime
import java.io.File
import java.io.PrintWriter
import java.time.format.DateTimeFormatter

//1. –ö–ª–∞—Å—Å—ã:
//- –ó–∞–º–µ—Ç–∫–∞ (–∑–∞–≥–æ–ª–æ–≤–æ–∫, —Ç–µ–∫—Å—Ç, –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è)
//- –ë–ª–æ–∫–Ω–æ—Ç (—Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫, –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏)

//2. –§—É–Ω–∫—Ü–∏–∏:
//- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
//- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–º–µ—Ç–∫–∏
//- –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
//- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫
//- –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏

class Note(
    var title: String,
    var text: String,
    var date: LocalDateTime,
    var lastEdit: LocalDateTime? = null
)

class NoteBook(val notes: MutableList<Note>)

val noteBook = NoteBook(mutableListOf<Note>())
val formatter: DateTimeFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss")

fun createNote(): Note {
    println("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫:")
    val title = readLine()!!
    println("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:")
    val text = readLine()!!
    val date = LocalDateTime.now()
    return Note(title, text, date)
}

fun editNote(existingNote: Note, newTitle: String, newText: String): Note {
    existingNote.title = newTitle
    existingNote.text = newText
    existingNote.lastEdit = LocalDateTime.now()
    return existingNote
}

fun deleteNote(existingNote: Note): Boolean {
    return noteBook.notes.remove(existingNote)
}

fun viewNotes(notes: MutableList<Note>) {
    println("–í—Å–µ –∑–∞–º–µ—Ç–∫–∏:")
    for (note in notes) {
        println("–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${note.title}, –¢–µ–∫—Å—Ç: ${if (note.text.length > 10)
            note.text.substring(0..10) else note.text}, –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: " +
                "${note.date.format(formatter)}, –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: " +
                "${note.lastEdit?.format(formatter) ?: "–ù–µ—Ç"}")
    }
}

fun viewNote(selectedNote: Note) {
    println("–í—ã–±—Ä–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ - –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${selectedNote.title}, –¢–µ–∫—Å—Ç: " +
            "${selectedNote.text}, –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${selectedNote.date.format(formatter)}, " +
            "–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${selectedNote.lastEdit?.format(formatter) ?: "–ù–µ—Ç"}")
}

fun searchNotes(notes: MutableList<Note>, searchText: String): List<Note> {
    return notes.filter { it.title.contains(searchText, ignoreCase = true) ||
            it.text.contains(searchText, ignoreCase = true) }
}

fun sortNotesByDateCreatedOrLastEdit(notes: MutableList<Note>, sortByDateCreated: Boolean = true) {
    notes.sortWith(compareByDescending<Note> {
        if (sortByDateCreated) it.date else it.lastEdit ?: LocalDateTime.MIN
    })
}

fun saveNotesToFile(notes: MutableList<Note>, fileName: String) {
    try {
        PrintWriter(File(fileName)).use { writer ->
            notes.forEach { obj ->
                writer.println("${obj.title}, ${obj.text}, ${obj.date.format(formatter)}, " +
                        "${obj.lastEdit?.format(formatter) ?: ""}")
            }
            println("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª $fileName.")
        }
    } catch (e: Exception) {
        println("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª: ${e.message}")
    }
}

fun Greeting() {
    println("1 - –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏")
    println("2 - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏")
    println("3 - –í—ã–±—Ä–∞—Ç—å –∑–∞–º–µ—Ç–∫—É")
    println("4 - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏")
    println("5 - –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏")
    println("6 - –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–∫–∏")
    println("7 - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è")
    println("8 - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    println("9 - –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    println("0 - –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–º–µ—Ç–æ–∫ –≤ —Ñ–∞–π–ª")
}

fun main() {
    var searchResults: List<Note> = emptyList()
    var selectedNote: Note? = null

    Greeting()
    var userInput: Int? = null

    while (userInput != 9) {
        try {
            userInput = readLine()?.toInt()
            if (userInput == null || userInput < 0 || userInput > 9) {
                println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 9.")
                continue
            }
            when (userInput) {
                1 -> {
                    val note = createNote()
                    noteBook.notes.add(note)
                    Greeting()
                }

                2 -> {
                    viewNotes(noteBook.notes)
                    Greeting()
                }

                3 -> {
                    println("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É:")
                    val noteNum = readLine()!!.toInt()
                    selectedNote = noteBook.notes.getOrNull(noteNum - 1)
                    val selectedFromSearch = searchResults.getOrNull(noteNum - 1)
                    if (selectedFromSearch != null) {
                        selectedNote = selectedFromSearch
                    }
                    if (selectedNote != null) {
                        viewNote(selectedNote)
                    } else {
                        println("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏")
                    }
                    Greeting()
                }

                4 -> {
                    if (selectedNote != null) {
                        println("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:")
                        println("–ò–∑–º–µ–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫:")
                        val newTitle = readLine()!!
                        println("–ò–∑–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç:")
                        val newText = readLine()!!
                        editNote(selectedNote, newTitle, newText)
                    } else {
                        println("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    }
                    Greeting()
                }

                5 -> {
                    if (selectedNote != null) {
                        deleteNote(selectedNote)
                    } else {
                        println("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    }
                    println("–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
                    Greeting()
                }

                6 -> {
                    println("–ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫: –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")
                    val searchText = readLine()!!
                    searchResults = searchNotes(noteBook.notes, searchText)
                    println("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
                    searchResults.forEachIndexed { index, note ->
                        println("${index + 1}. –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${note.title}, –¢–µ–∫—Å—Ç: " +
                                "${if (note.text.length > 10) note.text.substring(0..10)
                                else note.text}, –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${note.date.format(formatter)}," +
                                " –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${note.lastEdit?.format(formatter) ?: "–ù–µ—Ç"}")
                    }
                    Greeting()
                }

                7 -> {
                    sortNotesByDateCreatedOrLastEdit(noteBook.notes, sortByDateCreated = true)
                    println("–ó–∞–º–µ—Ç–∫–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è.")
                    viewNotes(noteBook.notes)
                    Greeting()
                }

                8 -> {
                    sortNotesByDateCreatedOrLastEdit(noteBook.notes, sortByDateCreated = false)
                    println("–ó–∞–º–µ—Ç–∫–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                    viewNotes(noteBook.notes)
                    Greeting()
                }

                0 -> {
                    saveNotesToFile(noteBook.notes, "notes.txt")
                    break
                    Greeting()
                }
            }
        } catch (e: NumberFormatException) {
            println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
            readLine()
        } catch (e: Exception) {
            println("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${e.message}")
        }
    }

    println("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
}

//3. –ö–æ–ª–ª–µ–∫—Ü–∏–∏: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞–º–∏ –∑–∞–º–µ—Ç–æ–∫.
//
//4. –î–∞—Ç–∞ –∏ –í—Ä–µ–º—è: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫.
//
//5. –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π UI –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.
//
//---
//
//üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ó–∞–¥–∞–Ω–∏–µ:
//
//- –ú–µ–Ω—é —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
//- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–º–µ—Ç–æ–∫
//- –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
//- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏
//
//---
//
//‚≠ê –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
//
//- –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏–ª–∏ —Ç–µ–∫—Å—Ç—É
//- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–º–µ—Ç–æ–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
//- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∑–∞–º–µ—Ç–æ–∫ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è